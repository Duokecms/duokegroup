/*! qiniu-js v1.0.22 | Copyright 2015 by Qiniu */
! function(global) {
    function createCookie(a, b, c) {
        var d = new Date;
        d.setTime(d.getTime() + 24 * c * 60 * 60 * 1e3);
        var e = "; expires=" + d.toGMTString();
        document.cookie = a + "=" + b + e + "; path=/"
    }

    function readCookie(a) {
        var b = a + "=";
        var c = document.cookie.split(";");
        for (var d = 0, e = c.length; e > d; d++) {
            var f = c[d];
            while (" " === f.charAt(0)) f = f.substring(1, f.length);
            if (0 === f.indexOf(b)) return f.substring(b.length, f.length)
        }
        return null
    }
    window.localStorage || (window.localStorage = {
        setItem: function(a, b) {
            createCookie(a, b, 30)
        },
        getItem: function(a) {
            return readCookie(a)
        },
        removeItem: function(a) {
            createCookie(a, "", -1)
        }
    });

    function QiniuJsSDK() {
        var that = this;
        this.detectIEVersion = function() {
            var a = 4,
                b = document.createElement("div"),
                c = b.getElementsByTagName("i");
            while (b.innerHTML = "<!--[if gt IE " + a + "]><i></i><![endif]-->", c[0]) a++;
            return a > 4 ? a : !1
        };
        var logger = {
            MUTE: 0,
            FATA: 1,
            ERROR: 2,
            WARN: 3,
            INFO: 4,
            DEBUG: 5,
            TRACE: 6,
            level: 0
        };

        function log(a, b) {
            var c = "[qiniu-js-sdk][" + a + "]";
            var d = c;
            for (var e = 0; e < b.length; e++) d += "string" == typeof b[e] ? " " + b[e] : " " + that.stringifyJSON(b[e]);
            that.detectIEVersion() ? console.log(d) : (b.unshift(c), console.log.apply(console, b)), document.getElementById("qiniu-js-sdk-log") && (document.getElementById("qiniu-js-sdk-log").innerHTML += "<p>" + d + "</p>")
        }

        function makeLogFunc(a) {
            var b = a.toLowerCase();
            logger[b] = function() {
                if (window.console && window.console.log && logger.level >= logger[a]) {
                    var c = Array.prototype.slice.call(arguments);
                    log(b, c)
                }
            }
        }
        for (var property in logger) logger.hasOwnProperty(property) && "number" == typeof logger[property] && !logger.hasOwnProperty(property.toLowerCase()) && makeLogFunc(property);
        var qiniuUploadUrl;
        qiniuUploadUrl = "https:" === window.location.protocol ? "https://up.qbox.me" : "http://upload.qiniu.com";
        var qiniuUploadUrls = ["http://upload.qiniu.com", "http://up.qiniu.com"];
        var qiniuUpHosts = {
            http: ["http://upload.qiniu.com", "http://up.qiniu.com"],
            https: ["https://up.qbox.me"]
        };
        var changeUrlTimes = 0;

        function StatisticsLogger() {
            var a = "https://uplog.qbox.me/log/3";
            var b = [];
            var c = {
                waiting: 0,
                processing: 1,
                finished: 2
            };
            this.log = function(a, d, e, f, g, h, i, j, k, l) {
                var m = Array.prototype.join.call(arguments, ",");
                b.push({
                    log: m,
                    status: c.waiting
                }), logger.debug("[STATISTICS] send log to statistics server", m)
            };

            function d() {
                var a = [];
                for (var d = 0; d < b.length; d++) b[d].status !== c.finished && a.push(b[d]), b[d].status === c.waiting && e(b[d]);
                b = a
            }

            function e(b) {
                b.status = c.processing;
                var d = that.createAjax();
                d.open("POST", a, !0), d.setRequestHeader("Content-type", "application/x-www-form-urlencoded"), d.setRequestHeader("Authorization", "UpToken " + that.token), d.onreadystatechange = function() {
                    4 === d.readyState && (200 === d.status ? (logger.debug("[STATISTICS] successfully report log to server"), b.status = c.finished) : (logger.debug("[STATISTICS] report log to server failed"), b.status = c.waiting))
                }, d.send(b.log)
            }
            setInterval(d, 1e3)
        }
        var statisticsLogger = new StatisticsLogger;
        var ExtraErrors = {
            ZeroSizeFile: -6,
            InvalidToken: -5,
            InvalidArgument: -4,
            InvalidFile: -3,
            Cancelled: -2,
            NetworkError: -1,
            UnknownError: 0,
            TimedOut: -1001,
            UnknownHost: -1003,
            CannotConnectToHost: -1004,
            NetworkConnectionLost: -1005
        };
        this.resetUploadUrl = function() {
            var a = "https:" === window.location.protocol ? qiniuUpHosts.https : qiniuUpHosts.http;
            var b = changeUrlTimes % a.length;
            qiniuUploadUrl = a[b], changeUrlTimes++, logger.debug("resetUploadUrl: " + qiniuUploadUrl)
        }, this.isImage = function(a) {
            return a = a.split(/[?#]/)[0], /\.(png|jpg|jpeg|gif|bmp)$/i.test(a)
        }, this.getFileExtension = function(a) {
            var b = a.split(".");
            var c;
            return c = 1 === b.length || "" === b[0] && 2 === b.length ? "" : b.pop().toLowerCase()
        }, this.utf8_encode = function(a) {
            if (null === a || "undefined" == typeof a) return "";
            var b = a + "";
            var c = "",
                d, e, f = 0;
            d = e = 0, f = b.length;
            for (var g = 0; f > g; g++) {
                var h = b.charCodeAt(g);
                var i = null;
                if (128 > h) e++;
                else if (h > 127 && 2048 > h) i = String.fromCharCode(h >> 6 | 192, 63 & h | 128);
                else if (63488 & h ^ !0) i = String.fromCharCode(h >> 12 | 224, h >> 6 & 63 | 128, 63 & h | 128);
                else {
                    if (64512 & h ^ !0) throw new RangeError("Unmatched trail surrogate at " + g);
                    var j = b.charCodeAt(++g);
                    if (64512 & j ^ !0) throw new RangeError("Unmatched lead surrogate at " + (g - 1));
                    h = ((1023 & h) << 10) + (1023 & j) + 65536, i = String.fromCharCode(h >> 18 | 240, h >> 12 & 63 | 128, h >> 6 & 63 | 128, 63 & h | 128)
                }
                null !== i && (e > d && (c += b.slice(d, e)), c += i, d = e = g + 1)
            }
            return e > d && (c += b.slice(d, f)), c
        }, this.base64_decode = function(a) {
            var b = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
            var c, d, e, f, g, h, i, j, k = 0,
                l = 0,
                m = "",
                n = [];
            if (!a) return a;
            a += "";
            do f = b.indexOf(a.charAt(k++)), g = b.indexOf(a.charAt(k++)), h = b.indexOf(a.charAt(k++)), i = b.indexOf(a.charAt(k++)), j = f << 18 | g << 12 | h << 6 | i, c = j >> 16 & 255, d = j >> 8 & 255, e = 255 & j, 64 === h ? n[l++] = String.fromCharCode(c) : 64 === i ? n[l++] = String.fromCharCode(c, d) : n[l++] = String.fromCharCode(c, d, e); while (k < a.length);
            return m = n.join("")
        }, this.base64_encode = function(a) {
            var b = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
            var c, d, e, f, g, h, i, j, k = 0,
                l = 0,
                m = "",
                n = [];
            if (!a) return a;
            a = this.utf8_encode(a + "");
            do c = a.charCodeAt(k++), d = a.charCodeAt(k++), e = a.charCodeAt(k++), j = c << 16 | d << 8 | e, f = j >> 18 & 63, g = j >> 12 & 63, h = j >> 6 & 63, i = 63 & j, n[l++] = b.charAt(f) + b.charAt(g) + b.charAt(h) + b.charAt(i); while (k < a.length);
            switch (m = n.join(""), a.length % 3) {
                case 1:
                    m = m.slice(0, -2) + "==";
                    break;
                case 2:
                    m = m.slice(0, -1) + "="
            }
            return m
        }, this.URLSafeBase64Encode = function(a) {
            return a = this.base64_encode(a), a.replace(/\//g, "_").replace(/\+/g, "-")
        }, this.URLSafeBase64Decode = function(a) {
            return a = a.replace(/_/g, "/").replace(/-/g, "+"), this.base64_decode(a)
        }, this.createAjax = function(a) {
            var b = {};
            return b = window.XMLHttpRequest ? new XMLHttpRequest : new ActiveXObject("Microsoft.XMLHTTP")
        }, this.parseJSON = function(data) {
            if (window.JSON && window.JSON.parse) return window.JSON.parse(data);
            var rx_dangerous = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
            var text = String(data);
            return rx_dangerous.lastIndex = 0, rx_dangerous.test(text) && (text = text.replace(rx_dangerous, function(a) {
                return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
            })), eval("(" + text + ")")
        }, this.stringifyJSON = function(a) {
            if (window.JSON && window.JSON.stringify) return window.JSON.stringify(a);
            switch (typeof a) {
                case "string":
                    return '"' + a.replace(/(["\\])/g, "\\$1") + '"';
                case "array":
                    return "[" + a.map(that.stringifyJSON).join(",") + "]";
                case "object":
                    if (a instanceof Array) {
                        var b = [];
                        var c = a.length;
                        for (var d = 0; c > d; d++) b.push(that.stringifyJSON(a[d]));
                        return "[" + b.join(",") + "]"
                    }
                    if (null === a) return "null";
                    var e = [];
                    for (var f in a) a.hasOwnProperty(f) && e.push(that.stringifyJSON(f) + ":" + that.stringifyJSON(a[f]));
                    return "{" + e.join(",") + "}";
                case "number":
                    return a;
                case !1:
                    return a;
                case "boolean":
                    return a
            }
        }, this.trim = function(a) {
            return null === a ? "" : a.replace(/^\s+|\s+$/g, "")
        }, this.uploader = function(a) {
            var b = function() {
                var b = that.detectIEVersion();
                var c, d, e;
                var f = "Safari" === moxie.core.utils.Env.browser && moxie.core.utils.Env.version <= 5 && "Windows" === moxie.core.utils.Env.os && "7" === moxie.core.utils.Env.osVersion || "Safari" === moxie.core.utils.Env.browser && "iOS" === moxie.core.utils.Env.os && "7" === moxie.core.utils.Env.osVersion;
                b && 9 > b && a.chunk_size && a.runtimes.indexOf("flash") >= 0 ? a.chunk_size = 0 : f ? a.chunk_size = 0 : (c = 20, d = 4 << c, e = plupload.parseSize(a.chunk_size), e > d && (a.chunk_size = d))
            };
            var c = function(a) {
                var b = [];
                var c = -1;
                for (var d = 0; d < a.length; d++) {
                    var e = a[d]; - 1 !== e.indexOf("upload") && (c = d), 0 === e.indexOf("-H") ? b.push(e.split(" ")[2]) : b.push(e)
                }
                if (-1 !== c) {
                    var f = b[c];
                    b[c] = b[0], b[0] = f
                }
                return b
            };
            var d = function(a) {
                var b = a.split(":");
                var c = b[0];
                var d = that.parseJSON(that.URLSafeBase64Decode(b[2]));
                return d.ak = c, d.scope.indexOf(":") >= 0 ? (d.bucket = d.scope.split(":")[0], d.key = d.scope.split(":")[1]) : d.bucket = d.scope, d
            };
            var e = function(b) {
                var e = d(b);
                var f = window.location.protocol + "//uc.qbox.me/v1/query?ak=" + e.ak + "&bucket=" + e.bucket;
                logger.debug("putPolicy: ", e), logger.debug("get uphosts from: ", f);
                var g = that.detectIEVersion();
                var h;
                g && 9 >= g ? (h = new moxie.xhr.XMLHttpRequest, moxie.core.utils.Env.swf_url = a.flash_swf_url) : h = that.createAjax(), h.open("GET", f, !1);
                var i = function() {
                    if (logger.debug("ajax.readyState: ", h.readyState), 4 === h.readyState)
                        if (logger.debug("ajax.status: ", h.status), h.status < 400) {
                            var a = that.parseJSON(h.responseText);
                            qiniuUpHosts.http = c(a.http.up), qiniuUpHosts.https = c(a.https.up), logger.debug("get new uphosts: ", qiniuUpHosts), that.resetUploadUrl()
                        } else logger.error("get uphosts error: ", h.responseText)
                };
                g && 9 >= g ? h.bind("readystatechange", i) : h.onreadystatechange = i, h.send()
            };
            var f = function(b) {
                return !that.token || a.uptoken_url && that.tokenInfo.isExpired() ? g(b) : that.token
            };
            var g = function(b) {
                if (a.uptoken) that.token = a.uptoken;
                else if (a.uptoken_url) {
                    logger.debug("get uptoken from: ", that.uptoken_url);
                    var c = that.createAjax();
                    if (c.open("GET", that.uptoken_url + "?" + +new Date, !1), c.send(), 200 === c.status) {
                        var d = that.parseJSON(c.responseText);
                        that.token = d.uptoken;
                        var f = that.token.split(":");
                        var g = that.parseJSON(that.URLSafeBase64Decode(f[2]));
                        that.tokenMap || (that.tokenMap = {});
                        var h = function(a) {
                            return Math.ceil(a.getTime() / 1e3)
                        };
                        var i = h(new Date(c.getResponseHeader("date")));
                        var j = h(new Date);
                        that.tokenInfo = {
                            serverDelay: j - i,
                            deadline: g.deadline / 1e3,
                            isExpired: function() {
                                var a = this.deadline - h(new Date) + this.serverDelay;
                                return 600 > a
                            }
                        }, logger.debug("get new uptoken: ", that.token), logger.debug("get token info: ", that.tokenInfo)
                    } else logger.error("get uptoken error: ", c.responseText)
                } else a.uptoken_func ? (logger.debug("get uptoken from uptoken_func"), that.token = a.uptoken_func(b), logger.debug("get new uptoken: ", that.token)) : logger.error("one of [uptoken, uptoken_url, uptoken_func] settings in options is required!");
                return that.token && e(that.token), that.token
            };
            var h = function(b, c, d) {
                var e = "",
                    f = !1;
                if (!a.save_key)
                    if (f = b.getOption && b.getOption("unique_names"), f = f || b.settings && b.settings.unique_names) {
                        var g = that.getFileExtension(c.name);
                        e = g ? c.id + "." + g : c.id
                    } else e = "function" == typeof d ? d(b, c) : c.name;
                return e
            };
            var i = function(a) {
                if (a && a.match) {
                    var b = a.match(/^https?:\/\/([^:^\/]*)/);
                    return b ? b[1] : ""
                }
                return ""
            };
            var j = function(a) {
                if (a && a.match) {
                    var b = a.match(/(^https?)/);
                    if (!b) return "";
                    var c = b[1];
                    return b = a.match(/^https?:\/\/([^:^\/]*):(\d*)/), b ? b[2] : "http" === c ? "80" : "443"
                }
                return ""
            };
            if (a.log_level && (logger.level = a.log_level), !a.domain) throw "domain setting in options is required!";
            if (!a.browse_button) throw "browse_button setting in options is required!";
            if (!a.uptoken && !a.uptoken_url && !a.uptoken_func) throw "one of [uptoken, uptoken_url, uptoken_func] settings in options is required!";
            logger.debug("init uploader start"), logger.debug("environment: ", moxie.core.utils.Env), logger.debug("userAgent: ", navigator.userAgent);
            var k = {};
            var l = a.init && a.init.Error;
            var m = a.init && a.init.FileUploaded;
            a.init.Error = function() {}, a.init.FileUploaded = function() {}, that.uptoken_url = a.uptoken_url, that.token = "", that.key_handler = "function" == typeof a.init.Key ? a.init.Key : "", this.domain = a.domain;
            var n = "";
            var o = {
                isResumeUpload: !1,
                resumeFilesize: 0,
                startTime: "",
                currentTime: ""
            };
            b(), logger.debug("invoke reset_chunk_size()"), logger.debug("op.chunk_size: ", a.chunk_size);
            var p = {
                url: qiniuUploadUrl,
                multipart_params: {
                    token: ""
                }
            };
            var q = that.detectIEVersion();
            q && 9 >= q && (p.multipart_params.accept = "text/plain; charset=utf-8", logger.debug("add accept text/plain in multipart params")), plupload.extend(k, a, p), logger.debug("option: ", k);
            var r = new plupload.Uploader(k);
            logger.debug("new plupload.Uploader(option)"), r.bind("Init", function(b, c) {
                logger.debug("Init event activated"), a.get_new_uptoken || g(null)
            }), logger.debug("bind Init event"), r.bind("FilesAdded", function(a, b) {
                logger.debug("FilesAdded event activated");
                var c = a.getOption && a.getOption("auto_start");
                c = c || a.settings && a.settings.auto_start, logger.debug("auto_start: ", c), logger.debug("files: ", b);
                var d = function() {
                    return "ios" === moxie.core.utils.Env.OS.toLowerCase() ? !0 : !1
                };
                if (d())
                    for (var e = 0; e < b.length; e++) {
                        var f = b[e];
                        var g = that.getFileExtension(f.name);
                        f.name = f.id + "." + g
                    }
                c && setTimeout(function() {
                    a.start(), logger.debug("invoke up.start()")
                }, 0), a.refresh()
            }), logger.debug("bind FilesAdded event"), r.bind("BeforeUpload", function(b, c) {
                logger.debug("BeforeUpload event activated"), c._start_at = new Date, c.speed = c.speed || 0, n = "", a.get_new_uptoken && g(c);
                var d = function(b, c, d) {
                    o.startTime = (new Date).getTime();
                    var f;
                    f = a.save_key ? {
                        token: that.token
                    } : {
                        key: h(b, c, d),
                        token: that.token
                    };
                    var g = that.detectIEVersion();
                    g && 9 >= g && (f.accept = "text/plain; charset=utf-8", logger.debug("add accept text/plain in multipart params")), logger.debug("directUpload multipart_params_obj: ", f);
                    var i = a.x_vars;
                    if (void 0 !== i && "object" == typeof i)
                        for (var j in i) i.hasOwnProperty(j) && ("function" == typeof i[j] ? f["x:" + j] = i[j](b, c) : "object" != typeof i[j] && (f["x:" + j] = i[j]));
                    b.setOption({
                        url: qiniuUploadUrl,
                        multipart: !0,
                        chunk_size: e() ? a.max_file_size : void 0,
                        multipart_params: f
                    })
                };
                var e = function() {
                    var a = navigator.userAgent.toLowerCase();
                    return (a.match(/MicroMessenger/i) || "QQBrowser" === moxie.core.utils.Env.browser || a.match(/V1_AND_SQ/i)) && "android" === moxie.core.utils.Env.OS.toLowerCase() ? !0 : !1
                };
                var i = b.getOption && b.getOption("chunk_size");
                if (i = i || b.settings && b.settings.chunk_size, logger.debug("uploader.runtime: ", r.runtime), logger.debug("chunk_size: ", i), "html5" !== r.runtime && "flash" !== r.runtime || !i) logger.debug("directUpload because uploader.runtime !== 'html5' || uploader.runtime !== 'flash' || !chunk_size"), d(b, c, that.key_handler);
                else if (c.size < i || e()) logger.debug("directUpload because file.size < chunk_size || is_android_weixin_or_qq()"), d(b, c, that.key_handler);
                else {
                    var j = localStorage.getItem(c.name);
                    var k = i;
                    if (j) {
                        j = that.parseJSON(j);
                        var l = (new Date).getTime();
                        var m = j.time || 0;
                        var p = 864e5;
                        p > l - m && 100 !== j.percent && c.size === j.total ? (c.percent = j.percent, c.loaded = j.offset, n = j.ctx, o.isResumeUpload = !0, o.resumeFilesize = j.offset, j.offset + k > c.size && (k = c.size - j.offset)) : localStorage.removeItem(c.name)
                    }
                    o.startTime = (new Date).getTime();
                    var q = {};
                    var s = that.detectIEVersion();
                    s && 9 >= s && (q.accept = "text/plain; charset=utf-8", logger.debug("add accept text/plain in multipart params")), b.setOption({
                        url: qiniuUploadUrl + "/mkblk/" + k,
                        multipart: !1,
                        chunk_size: i,
                        required_features: "chunks",
                        headers: {
                            Authorization: "UpToken " + f(c)
                        },
                        multipart_params: q
                    })
                }
            }), logger.debug("bind BeforeUpload event"), r.bind("UploadProgress", function(a, b) {
                logger.trace("UploadProgress event activated"), o.currentTime = (new Date).getTime();
                var c = o.currentTime - o.startTime;
                var d = b.loaded || 0;
                o.isResumeUpload && (d = b.loaded - o.resumeFilesize), b.speed = (d / c * 1e3).toFixed(0) || 0
            }), logger.debug("bind UploadProgress event"), r.bind("ChunkUploaded", function(a, b, c) {
                logger.debug("ChunkUploaded event activated"), logger.debug("ChunkUploaded file: ", b), logger.debug("ChunkUploaded info: ", c);
                var d = that.parseJSON(c.response);
                logger.debug("ChunkUploaded res: ", d), n = n ? n + "," + d.ctx : d.ctx;
                var e = c.total - c.offset;
                var g = a.getOption && a.getOption("chunk_size");
                g = g || a.settings && a.settings.chunk_size, g > e && (a.setOption({
                    url: qiniuUploadUrl + "/mkblk/" + e
                }), logger.debug("up.setOption url: ", qiniuUploadUrl + "/mkblk/" + e)), a.setOption({
                    headers: {
                        Authorization: "UpToken " + f(b)
                    }
                }), localStorage.setItem(b.name, that.stringifyJSON({
                    ctx: n,
                    percent: b.percent,
                    total: c.total,
                    offset: c.offset,
                    time: (new Date).getTime()
                }))
            }), logger.debug("bind ChunkUploaded event");
            var s = qiniuUploadUrls.length;
            var t = function(a) {
                return s-- > 0 ? (setTimeout(function() {
                    that.resetUploadUrl(), a.status = plupload.QUEUED, r.stop(), r.start()
                }, 0), !0) : (s = qiniuUploadUrls.length, !1)
            };
            return r.bind("Error", function(b) {
                return function(c, d) {
                    logger.error("Error event activated"), logger.error("err: ", d);
                    var e = new Date;
                    var f = "";
                    var g = d.file;
                    if (g) {
                        switch (d.code) {
                            case plupload.FAILED:
                                f = "\u4e0a\u4f20\u5931\u8d25\u3002\u8bf7\u7a0d\u540e\u518d\u8bd5\u3002";
                                break;
                            case plupload.FILE_SIZE_ERROR:
                                var h = c.getOption && c.getOption("max_file_size");
                                h = h || c.settings && c.settings.max_file_size, f = "\u6d4f\u89c8\u5668\u6700\u5927\u53ef\u4e0a\u4f20" + h + "\u3002\u66f4\u5927\u6587\u4ef6\u8bf7\u4f7f\u7528\u547d\u4ee4\u884c\u5de5\u5177\u3002";
                                break;
                            case plupload.FILE_EXTENSION_ERROR:
                                f = "\u6587\u4ef6\u9a8c\u8bc1\u5931\u8d25\u3002\u8bf7\u7a0d\u540e\u91cd\u8bd5\u3002";
                                break;
                            case plupload.HTTP_ERROR:
                                if ("" === d.response) {
                                    if (f = d.message || "\u672a\u77e5\u7f51\u7edc\u9519\u8bef\u3002", !t(g)) return;
                                    break
                                }
                                var k = that.parseJSON(d.response);
                                var l = k.error;
                                switch (d.status) {
                                    case 400:
                                        f = "\u8bf7\u6c42\u62a5\u6587\u683c\u5f0f\u9519\u8bef\u3002";
                                        break;
                                    case 401:
                                        f = "\u5ba2\u6237\u7aef\u8ba4\u8bc1\u6388\u6743\u5931\u8d25\u3002\u8bf7\u91cd\u8bd5\u6216\u63d0\u4ea4\u53cd\u9988\u3002";
                                        break;
                                    case 405:
                                        f = "\u5ba2\u6237\u7aef\u8bf7\u6c42\u9519\u8bef\u3002\u8bf7\u91cd\u8bd5\u6216\u63d0\u4ea4\u53cd\u9988\u3002";
                                        break;
                                    case 579:
                                        f = "\u8d44\u6e90\u4e0a\u4f20\u6210\u529f\uff0c\u4f46\u56de\u8c03\u5931\u8d25\u3002";
                                        break;
                                    case 599:
                                        if (f = "\u7f51\u7edc\u8fde\u63a5\u5f02\u5e38\u3002\u8bf7\u91cd\u8bd5\u6216\u63d0\u4ea4\u53cd\u9988\u3002", !t(g)) return;
                                        break;
                                    case 614:
                                        f = "\u6587\u4ef6\u5df2\u5b58\u5728\u3002";
                                        try {
                                            k = that.parseJSON(k.error), l = k.error || "file exists"
                                        } catch (m) {
                                            l = k.error || "file exists"
                                        }
                                        break;
                                    case 631:
                                        f = "\u6307\u5b9a\u7a7a\u95f4\u4e0d\u5b58\u5728\u3002";
                                        break;
                                    case 701:
                                        f = "\u4e0a\u4f20\u6570\u636e\u5757\u6821\u9a8c\u51fa\u9519\u3002\u8bf7\u91cd\u8bd5\u6216\u63d0\u4ea4\u53cd\u9988\u3002";
                                        break;
                                    default:
                                        if (f = "\u672a\u77e5\u9519\u8bef\u3002", !t(g)) return
                                }
                                f = f + "(" + d.status + "\uff1a" + l + ")";
                                break;
                            case plupload.SECURITY_ERROR:
                                f = "\u5b89\u5168\u914d\u7f6e\u9519\u8bef\u3002\u8bf7\u8054\u7cfb\u7f51\u7ad9\u7ba1\u7406\u5458\u3002";
                                break;
                            case plupload.GENERIC_ERROR:
                                f = "\u4e0a\u4f20\u5931\u8d25\u3002\u8bf7\u7a0d\u540e\u518d\u8bd5\u3002";
                                break;
                            case plupload.IO_ERROR:
                                f = "\u4e0a\u4f20\u5931\u8d25\u3002\u8bf7\u7a0d\u540e\u518d\u8bd5\u3002";
                                break;
                            case plupload.INIT_ERROR:
                                f = "\u7f51\u7ad9\u914d\u7f6e\u9519\u8bef\u3002\u8bf7\u8054\u7cfb\u7f51\u7ad9\u7ba1\u7406\u5458\u3002", r.destroy();
                                break;
                            default:
                                if (f = d.message + d.details, !t(g)) return
                        }
                        b && b(c, d, f)
                    }
                    if (c.refresh(), !a.disable_statistics_report) {
                        var n = d && d.responseHeaders && d.responseHeaders.match ? d.responseHeaders.match(/(X-Reqid\:\ )([\w\.\%-]*)/) : [];
                        console.log(d);
                        var o = n[2].replace(/[\r\n]/g, "");
                        var p = plupload.HTTP_ERROR ? d.status : d.code;
                        var q = g._start_at ? g._start_at.getTime() : e.getTime();
                        statisticsLogger.log(0 === p ? ExtraErrors.NetworkError : p, o, i(c.settings.url), void 0, j(c.settings.url), (e.getTime() - q) / 1e3, parseInt(q / 1e3), d.file.size * (d.file.percent / 100), "jssdk-" + c.runtime, g.size)
                    }
                }
            }(l)), logger.debug("bind Error event"), r.bind("FileUploaded", function(b) {
                return function(c, d, e) {
                    logger.debug("FileUploaded event activated"), logger.debug("FileUploaded file: ", d), logger.debug("FileUploaded info: ", e);
                    var f = new Date;
                    var g = function(c, d, e) {
                        if (logger.debug("FileUploaded last step:", e), a.downtoken_url) {
                            var f = that.createAjax();
                            f.open("POST", a.downtoken_url, !0), f.setRequestHeader("Content-type", "application/x-www-form-urlencoded"), f.onreadystatechange = function() {
                                if (4 === f.readyState)
                                    if (200 === f.status) {
                                        var a;
                                        try {
                                            a = that.parseJSON(f.responseText)
                                        } catch (g) {
                                            throw "invalid json format"
                                        }
                                        var h = {};
                                        plupload.extend(h, that.parseJSON(e.response), a), e.response = that.stringifyJSON(h), b && b(c, d, e)
                                    } else r.trigger("Error", {
                                        status: f.status,
                                        response: f.responseText,
                                        file: d,
                                        code: plupload.HTTP_ERROR
                                    })
                            }, f.send("key=" + that.parseJSON(e.response).key + "&domain=" + a.domain)
                        } else b && b(c, d, e)
                    };
                    var k = that.parseJSON(e.response);
                    if (n = n ? n : k.ctx, logger.debug("ctx: ", n), n) {
                        var l = "";
                        logger.debug("save_key: ", a.save_key), a.save_key || (l = h(c, d, that.key_handler), l = l ? "/key/" + that.URLSafeBase64Encode(l) : "");
                        var m = "/fname/" + that.URLSafeBase64Encode(d.name);
                        logger.debug("op.x_vars: ", a.x_vars);
                        var o = a.x_vars,
                            p = "",
                            q = "";
                        if (void 0 !== o && "object" == typeof o)
                            for (var s in o) o.hasOwnProperty(s) && ("function" == typeof o[s] ? p = that.URLSafeBase64Encode(o[s](c, d)) : "object" != typeof o[s] && (p = that.URLSafeBase64Encode(o[s])), q += "/x:" + s + "/" + p);
                        var t = qiniuUploadUrl + "/mkfile/" + d.size + l + m + q;
                        var u = that.detectIEVersion();
                        var v;
                        u && 9 >= u ? (v = new moxie.xhr.XMLHttpRequest, moxie.core.utils.Env.swf_url = a.flash_swf_url) : v = that.createAjax(), v.open("POST", t, !0), v.setRequestHeader("Content-Type", "text/plain;charset=UTF-8"), console.log("uptoken:" + that.token), v.setRequestHeader("Authorization", "UpToken " + that.token);
                        var w = function() {
                            if (logger.debug("ajax.readyState: ", v.readyState), 4 === v.readyState) {
                                localStorage.removeItem(d.name);
                                var a;
                                200 === v.status ? (a = {
                                    status: v.status,
                                    response: v.responseText,
                                    responseHeaders: v.getAllResponseHeaders()
                                }, logger.debug("mkfile is success: ", a), g(c, d, a)) : (a = {
                                    status: v.status,
                                    response: v.responseText,
                                    file: d,
                                    code: -200,
                                    responseHeaders: v.getAllResponseHeaders()
                                }, logger.debug("mkfile is error: ", a), r.trigger("Error", a))
                            }
                        };
                        u && 9 >= u ? v.bind("readystatechange", w) : v.onreadystatechange = w, v.send(n), logger.debug("mkfile: ", t)
                    } else g(c, d, e); if (!a.disable_statistics_report) {
                        console.log(e.responseHeaders);
                        var x = e.responseHeaders.match(/(X-Reqid\:\ )([\w\.\%-]*)/i)[2].replace(/[\r\n]/g, "");
                        var y = d._start_at ? d._start_at.getTime() : f.getTime();
                        statisticsLogger.log(e.status, x, i(c.settings.url), void 0, j(c.settings.url), (f.getTime() - y) / 1e3, parseInt(y / 1e3), d.size, "jssdk-" + c.runtime, d.size)
                    }
                }
            }(m)), logger.debug("bind FileUploaded event"), r.bind("FilesRemoved", function(b, c) {
                var d = new Date;
                if (!a.disable_statistics_report)
                    for (var e = 0; e < c.length; e++) statisticsLogger.log(ExtraErrors.Cancelled, void 0, i(b.settings.url), void 0, j(b.settings.url), (d.getTime() - c[e]._start_at.getTime()) / 1e3, c[e]._start_at.getTime() / 1e3, c[e].size * c[e].percent / 100, "jssdk-" + b.runtime, c[e].size)
            }), logger.debug("bind FilesRemoved event"), r.init(), logger.debug("invoke uploader.init()"), logger.debug("init uploader end"), r
        }, this.getUrl = function(a) {
            if (!a) return !1;
            a = encodeURI(a);
            var b = this.domain;
            return "/" !== b.slice(b.length - 1) && (b += "/"), b + a
        }, this.imageView2 = function(a, b) {
            if (!/^\d$/.test(a.mode)) return !1;
            var c = a.mode,
                d = a.w || "",
                e = a.h || "",
                f = a.q || "",
                g = a.format || "";
            if (!d && !e) return !1;
            var h = "imageView2/" + c;
            return h += d ? "/w/" + d : "", h += e ? "/h/" + e : "", h += f ? "/q/" + f : "", h += g ? "/format/" + g : "", b && (h = this.getUrl(b) + "?" + h), h
        }, this.imageMogr2 = function(a, b) {
            var c = a["auto-orient"] || "",
                d = a.thumbnail || "",
                e = a.strip || "",
                f = a.gravity || "",
                g = a.crop || "",
                h = a.quality || "",
                i = a.rotate || "",
                j = a.format || "",
                k = a.blur || "";
            var l = "imageMogr2";
            return l += c ? "/auto-orient" : "", l += d ? "/thumbnail/" + d : "", l += e ? "/strip" : "", l += f ? "/gravity/" + f : "", l += h ? "/quality/" + h : "", l += g ? "/crop/" + g : "", l += i ? "/rotate/" + i : "", l += j ? "/format/" + j : "", l += k ? "/blur/" + k : "", b && (l = this.getUrl(b) + "?" + l), l
        }, this.watermark = function(a, b) {
            var c = a.mode;
            if (!c) return !1;
            var d = "watermark/" + c;
            if (1 === c) {
                var e = a.image || "";
                if (!e) return !1;
                d += e ? "/image/" + this.URLSafeBase64Encode(e) : ""
            } else {
                if (2 !== c) return !1;
                var f = a.text ? a.text : "",
                    g = a.font ? a.font : "",
                    h = a.fontsize ? a.fontsize : "",
                    i = a.fill ? a.fill : "";
                if (!f) return !1;
                d += f ? "/text/" + this.URLSafeBase64Encode(f) : "", d += g ? "/font/" + this.URLSafeBase64Encode(g) : "", d += h ? "/fontsize/" + h : "", d += i ? "/fill/" + this.URLSafeBase64Encode(i) : ""
            }
            var j = a.dissolve || "",
                k = a.gravity || "",
                l = a.dx || "",
                m = a.dy || "";
            return d += j ? "/dissolve/" + j : "", d += k ? "/gravity/" + k : "", d += l ? "/dx/" + l : "", d += m ? "/dy/" + m : "", b && (d = this.getUrl(b) + "?" + d), d
        }, this.imageInfo = function(a) {
            if (!a) return !1;
            var b = this.getUrl(a) + "?imageInfo";
            var c = this.createAjax();
            var d;
            var e = this;
            return c.open("GET", b, !1), c.onreadystatechange = function() {
                4 === c.readyState && 200 === c.status && (d = e.parseJSON(c.responseText))
            }, c.send(), d
        }, this.exif = function(a) {
            if (!a) return !1;
            var b = this.getUrl(a) + "?exif";
            var c = this.createAjax();
            var d;
            var e = this;
            return c.open("GET", b, !1), c.onreadystatechange = function() {
                4 === c.readyState && 200 === c.status && (d = e.parseJSON(c.responseText))
            }, c.send(), d
        }, this.get = function(a, b) {
            return b && a ? "exif" === a ? this.exif(b) : "imageInfo" === a ? this.imageInfo(b) : !1 : !1
        }, this.pipeline = function(a, b) {
            var c = "[object Array]" === Object.prototype.toString.call(a);
            var d, e, f = "";
            if (c) {
                for (var g = 0, h = a.length; h > g; g++) {
                    if (d = a[g], !d.fop) return !1;
                    switch (d.fop) {
                        case "watermark":
                            f += this.watermark(d) + "|";
                            break;
                        case "imageView2":
                            f += this.imageView2(d) + "|";
                            break;
                        case "imageMogr2":
                            f += this.imageMogr2(d) + "|";
                            break;
                        default:
                            e = !0
                    }
                    if (e) return !1
                }
                if (b) {
                    f = this.getUrl(b) + "?" + f;
                    var i = f.length;
                    "|" === f.slice(i - 1) && (f = f.slice(0, i - 1))
                }
                return f
            }
            return !1
        }
    }
    var Qiniu = new QiniuJsSDK;
    global.Qiniu = Qiniu, global.QiniuJsSDK = QiniuJsSDK
}(window);//# sourceMappingURL=dist/qiniu.min.map